openapi: 3.0.0
info:
  title: "Validation Service API"
  description: "API for the Validation Service, which provides a centralized system for validating data against schemas throughout the application."
  version: "1.0.0"
  contact:
    name: "API Support"
    email: "api-support@example.com"
    url: "https://example.com/support"
  
servers:
  - url: "https://api.example.com/v1"
    description: "Production API Server"
  - url: "https://sandbox-api.example.com/v1"
    description: "Sandbox API Server for testing"

security:
  - bearerAuth: []
  - apiKey: []

tags:
  - name: "Schemas"
    description: "Operations for managing validation schemas"
  - name: "Validation"
    description: "Operations for validating data against schemas"
  - name: "Validators"
    description: "Operations for managing custom validators"

paths:
  /validation/schemas:
    get:
      summary: "List schemas"
      description: "Returns a list of available schemas based on the provided filters."
      operationId: "listSchemas"
      tags:
        - "Schemas"
      parameters:
        - name: page
          in: query
          description: "Page number for pagination"
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            default: 20
        - name: namespace
          in: query
          description: "Filter schemas by namespace"
          required: false
          schema:
            type: string
        - name: deprecated
          in: query
          description: "Include deprecated schemas"
          required: false
          schema:
            type: boolean
            default: false
        - name: search
          in: query
          description: "Search term to filter schemas by name or description"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Register a new schema"
      description: "Registers a new schema with the provided details."
      operationId: "registerSchema"
      tags:
        - "Schemas"
      requestBody:
        description: "Schema details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaRegistration"
      responses:
        '201':
          description: "Schema registered successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '409':
          $ref: "#/components/responses/Conflict"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"
  
  /validation/schemas/{id}:
    parameters:
      - name: id
        in: path
        description: "ID of the schema"
        required: true
        schema:
          type: string
    get:
      summary: "Get schema by ID"
      description: "Returns a single schema by ID."
      operationId: "getSchema"
      tags:
        - "Schemas"
      parameters:
        - name: version
          in: query
          description: "Specific schema version to retrieve"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
        '404':
          $ref: "#/components/responses/NotFound"
        '401':
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Update schema"
      description: "Updates an existing schema by creating a new version."
      operationId: "updateSchema"
      tags:
        - "Schemas"
      parameters:
        - name: checkCompatibility
          in: query
          description: "Whether to check compatibility with previous versions"
          required: false
          schema:
            type: boolean
            default: true
      requestBody:
        description: "Updated schema details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaUpdate"
      responses:
        '200':
          description: "Schema updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"

  /validation/validate:
    post:
      summary: "Validate data against a schema"
      description: "Validates data against a specified schema."
      operationId: "validateData"
      tags:
        - "Validation"
      requestBody:
        description: "Validation request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidationRequest"
      responses:
        '200':
          description: "Validation completed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationResult"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"

  /validation/validate/batch:
    post:
      summary: "Batch validate multiple data objects"
      description: "Validates multiple data objects against schemas in a single request."
      operationId: "batchValidateData"
      tags:
        - "Validation"
      requestBody:
        description: "Batch validation request"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchValidationRequest"
      responses:
        '200':
          description: "Batch validation completed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BatchValidationResult"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"

  /validation/validators:
    get:
      summary: "List custom validators"
      description: "Returns a list of registered custom validators."
      operationId: "listValidators"
      tags:
        - "Validators"
      parameters:
        - name: page
          in: query
          description: "Page number for pagination"
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            default: 20
        - name: type
          in: query
          description: "Filter validators by type"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidatorList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Register a custom validator"
      description: "Registers a new custom validator with the provided details."
      operationId: "registerValidator"
      tags:
        - "Validators"
      requestBody:
        description: "Validator details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidatorRegistration"
      responses:
        '201':
          description: "Validator registered successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Validator"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '409':
          $ref: "#/components/responses/Conflict"
        '422':
          $ref: "#/components/responses/UnprocessableEntity"

  /validation/validators/{id}:
    parameters:
      - name: id
        in: path
        description: "ID of the validator"
        required: true
        schema:
          type: string
    get:
      summary: "Get validator by ID"
      description: "Returns a single validator by ID."
      operationId: "getValidator"
      tags:
        - "Validators"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Validator"
        '404':
          $ref: "#/components/responses/NotFound"
        '401':
          $ref: "#/components/responses/Unauthorized"
    delete:
      summary: "Delete validator"
      description: "Deletes a custom validator."
      operationId: "deleteValidator"
      tags:
        - "Validators"
      responses:
        '204':
          description: "Validator deleted successfully"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from the authentication service"
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: "API key for direct access"
  
  schemas:
    SchemaList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SchemaListItem"
        pagination:
          $ref: "#/components/schemas/Pagination"
    
    SchemaListItem:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the schema"
        version:
          type: string
          description: "Schema version (semver format)"
        namespace:
          type: string
          description: "Logical grouping for schemas"
        name:
          type: string
          description: "Human-readable name"
        description:
          type: string
          description: "Description of the schema"
        isDeprecated:
          type: boolean
          description: "Whether schema is deprecated"
        updatedAt:
          type: string
          format: date-time
          description: "Last update timestamp"
      required:
        - id
        - version
        - name
        - isDeprecated
        - updatedAt
    
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: "Current page number"
        limit:
          type: integer
          description: "Items per page"
        total:
          type: integer
          description: "Total number of items"
        pages:
          type: integer
          description: "Total number of pages"
      required:
        - page
        - limit
        - total
        - pages
    
    Schema:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the schema"
        version:
          type: string
          description: "Schema version (semver format)"
        namespace:
          type: string
          description: "Logical grouping for schemas"
        name:
          type: string
          description: "Human-readable name"
        description:
          type: string
          description: "Description of the schema"
        schema:
          type: object
          description: "The actual JSON schema"
        isDeprecated:
          type: boolean
          description: "Whether schema is deprecated"
        metadata:
          type: object
          description: "Additional metadata"
          properties:
            owner:
              type: string
              description: "Owner/team responsible for schema"
            compatibility:
              type: string
              description: "Compatibility level"
            tags:
              type: array
              items:
                type: string
              description: "Searchable tags"
        createdAt:
          type: string
          format: date-time
          description: "Creation timestamp"
        updatedAt:
          type: string
          format: date-time
          description: "Last update timestamp"
      required:
        - id
        - version
        - name
        - schema
        - isDeprecated
        - createdAt
        - updatedAt
    
    SchemaRegistration:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the schema"
        namespace:
          type: string
          description: "Logical grouping for schemas"
        name:
          type: string
          description: "Human-readable name"
        description:
          type: string
          description: "Description of the schema"
        schema:
          type: object
          description: "The actual JSON schema"
        metadata:
          type: object
          description: "Additional metadata"
      required:
        - id
        - name
        - schema
    
    SchemaUpdate:
      type: object
      properties:
        name:
          type: string
          description: "Human-readable name"
        description:
          type: string
          description: "Description of the schema"
        schema:
          type: object
          description: "The actual JSON schema"
        metadata:
          type: object
          description: "Additional metadata"
      required:
        - schema
    
    ValidationRequest:
      type: object
      properties:
        schemaId:
          type: string
          description: "ID of the schema to validate against"
        version:
          type: string
          description: "Specific schema version to use (optional)"
        data:
          type: object
          description: "Data to validate"
        options:
          type: object
          properties:
            errorFormat:
              type: string
              enum: ["standard", "detailed", "basic"]
              description: "Format for validation errors"
            coerceTypes:
              type: boolean
              description: "Whether to coerce data types"
            strictMode:
              type: boolean
              description: "Enforce strict validation"
      required:
        - schemaId
        - data
    
    ValidationResult:
      type: object
      properties:
        valid:
          type: boolean
          description: "Whether validation passed"
        data:
          type: object
          description: "The validated data (only present if valid is true)"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: "Validation errors (only present if valid is false)"
        meta:
          type: object
          properties:
            schemaId:
              type: string
              description: "ID of schema used"
            version:
              type: string
              description: "Version of schema used"
            duration:
              type: number
              description: "Validation duration in milliseconds"
            mode:
              type: string
              description: "Validation mode used"
            errorCount:
              type: integer
              description: "Number of validation errors"
      required:
        - valid
        - meta
    
    ValidationError:
      type: object
      properties:
        code:
          type: string
          description: "Error code"
        message:
          type: string
          description: "Human-readable error message"
        path:
          type: string
          description: "JSON path to error location"
        schemaPath:
          type: string
          description: "Path in schema that validation failed"
        params:
          type: object
          description: "Additional error parameters"
      required:
        - code
        - message
        - path
    
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: "Error code"
            message:
              type: string
              description: "Human-readable error message"
            details:
              type: object
              description: "Additional error details"
            requestId:
              type: string
              description: "Unique request identifier for tracing"
          required:
            - code
            - message
    
    BatchValidationRequest:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: "Unique identifier for this validation item"
              schemaId:
                type: string
                description: "ID of the schema to validate against"
              version:
                type: string
                description: "Specific schema version to use (optional)"
              data:
                type: object
                description: "Data to validate"
            required:
              - id
              - schemaId
              - data
        options:
          type: object
          properties:
            errorFormat:
              type: string
              enum: ["standard", "detailed", "basic"]
              description: "Format for validation errors"
            coerceTypes:
              type: boolean
              description: "Whether to coerce data types"
            strictMode:
              type: boolean
              description: "Enforce strict validation"
            failFast:
              type: boolean
              description: "Stop processing on first failure"
      required:
        - items
    
    BatchValidationResult:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: "Identifier matching the request item"
              valid:
                type: boolean
                description: "Whether validation passed"
              data:
                type: object
                description: "The validated data (only present if valid is true)"
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ValidationError"
                description: "Validation errors (only present if valid is false)"
            required:
              - id
              - valid
        meta:
          type: object
          properties:
            totalCount:
              type: integer
              description: "Total number of items processed"
            validCount:
              type: integer
              description: "Number of valid items"
            invalidCount:
              type: integer
              description: "Number of invalid items"
            duration:
              type: number
              description: "Total validation duration in milliseconds"
          required:
            - totalCount
            - validCount
            - invalidCount
      required:
        - results
        - meta
    
    ValidatorList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/ValidatorListItem"
        pagination:
          $ref: "#/components/schemas/Pagination"
      required:
        - items
        - pagination
    
    ValidatorListItem:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the validator"
        name:
          type: string
          description: "Human-readable name"
        type:
          type: string
          description: "Validator type"
        description:
          type: string
          description: "Description of the validator"
        updatedAt:
          type: string
          format: date-time
          description: "Last update timestamp"
      required:
        - id
        - name
        - type
        - updatedAt
    
    Validator:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the validator"
        name:
          type: string
          description: "Human-readable name"
        type:
          type: string
          description: "Validator type"
        description:
          type: string
          description: "Description of the validator"
        implementation:
          type: object
          description: "Implementation details"
          properties:
            language:
              type: string
              description: "Implementation language"
            code:
              type: string
              description: "Validator code"
            config:
              type: object
              description: "Configuration options"
        metadata:
          type: object
          description: "Additional metadata"
          properties:
            owner:
              type: string
              description: "Owner/team responsible for validator"
            tags:
              type: array
              items:
                type: string
              description: "Searchable tags"
        createdAt:
          type: string
          format: date-time
          description: "Creation timestamp"
        updatedAt:
          type: string
          format: date-time
          description: "Last update timestamp"
      required:
        - id
        - name
        - type
        - implementation
        - createdAt
        - updatedAt
    
    ValidatorRegistration:
      type: object
      properties:
        name:
          type: string
          description: "Human-readable name"
        type:
          type: string
          description: "Validator type"
        description:
          type: string
          description: "Description of the validator"
        implementation:
          type: object
          description: "Implementation details"
          properties:
            language:
              type: string
              description: "Implementation language"
            code:
              type: string
              description: "Validator code"
            config:
              type: object
              description: "Configuration options"
        metadata:
          type: object
          description: "Additional metadata"
      required:
        - name
        - type
        - implementation
  
  responses:
    BadRequest:
      description: "Bad Request - The request was malformed or contains invalid parameters"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    Unauthorized:
      description: "Unauthorized - Authentication is required or failed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    NotFound:
      description: "Not Found - The requested resource does not exist"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    Conflict:
      description: "Conflict - The request conflicts with current state"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    UnprocessableEntity:
      description: "Unprocessable Entity - Schema validation failed or contains syntax errors"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error" 