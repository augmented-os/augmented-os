openapi: 3.0.0
info:
  title: "Business Store Service API"
  description: >-
    API for the Business Store Service, which manages multi-tenant business data with customizable data models. 
    Enables tenants to define and manage their own data schemas and store/retrieve business records with semantic search capabilities.
    
    ## Schema Format
    
    This API allows tenants to define their database schema using a rich PostgreSQL-compatible JSON format. 
    For detailed information on the schema format, refer to the [Tenant Schema Format Specification](../tenant_db_schema_format.md).
    
    The schema definition sent to the API endpoint should follow the format defined in the components section. 
    This format fully supports PostgreSQL features including multiple schemas, tables, columns with various data types, 
    constraints, indexes, views, functions, triggers, and partitioning.
  version: "1.0.0"
  contact:
    name: "Augmented OS API Support"
    email: "api-support@example.com"
    url: "https://example.com/support"
  
servers:
  - url: "https://api.example.com/api/business"
    description: "Production API Server"
  - url: "https://sandbox-api.example.com/api/business"
    description: "Sandbox API Server for testing"

tags:
  - name: "Schema"
    description: "Operations for managing tenant data models and schemas"
  - name: "Data"
    description: "Operations for managing business data records"
  - name: "Search"
    description: "Operations for semantic search across tenant data"
  - name: "Integration"
    description: "Operations for data import/export and system integration"
  - name: "Health"
    description: "Health check operations for the service"

paths:
  /{tenantId}/schema:
    parameters:
      - name: tenantId
        in: path
        description: "ID of the tenant"
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: "Get the current schema definition"
      description: "Retrieves the current JSON Schema definition (data model) for the tenant."
      operationId: "getTenantSchema"
      tags:
        - "Schema"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaDefinition"
        '404':
          $ref: "#/components/responses/NotFound"
        '401':
          $ref: "#/components/responses/Unauthorized"
    put:
      summary: "Update or define tenant schema"
      description: "Define a new data model or update the existing data model for the tenant."
      operationId: "updateTenantSchema"
      tags:
        - "Schema"
      requestBody:
        description: "JSON Schema definition for the tenant's data model"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaDefinition"
      responses:
        '200':
          description: "Schema updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaUpdateResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '409':
          $ref: "#/components/responses/Conflict"

  /{tenantId}/data/{resource}:
    parameters:
      - name: tenantId
        in: path
        description: "ID of the tenant"
        required: true
        schema:
          type: string
          format: uuid
      - name: resource
        in: path
        description: "Resource type (table name) as defined in tenant schema"
        required: true
        schema:
          type: string
    get:
      summary: "List/search resources"
      description: "Returns a list of records for the specified resource based on filters and search parameters."
      operationId: "listResources"
      tags:
        - "Data"
      parameters:
        - name: filter
          in: query
          description: "Filter by field values (format: filter[fieldName]=value)"
          required: false
          explode: true
          schema:
            type: object
            additionalProperties: true
        - name: q
          in: query
          description: "Free text search query"
          required: false
          schema:
            type: string
        - name: semantic
          in: query
          description: "Semantic search query"
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          description: "Offset for pagination"
          required: false
          schema:
            type: integer
            default: 0
        - name: sort
          in: query
          description: "Sort field and direction (format: fieldName(asc|desc))"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create a new record"
      description: "Creates a new record in the specified resource (table) for the tenant."
      operationId: "createResource"
      tags:
        - "Data"
      requestBody:
        description: "Record details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceCreate"
      responses:
        '201':
          description: "Record created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '409':
          $ref: "#/components/responses/Conflict"
  
  /{tenantId}/data/{resource}/{recordId}:
    parameters:
      - name: tenantId
        in: path
        description: "ID of the tenant"
        required: true
        schema:
          type: string
          format: uuid
      - name: resource
        in: path
        description: "Resource type (table name) as defined in tenant schema"
        required: true
        schema:
          type: string
      - name: recordId
        in: path
        description: "ID of the record"
        required: true
        schema:
          type: string
    get:
      summary: "Get record by ID"
      description: "Returns a single record by ID from the specified resource."
      operationId: "getResource"
      tags:
        - "Data"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        '404':
          $ref: "#/components/responses/NotFound"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
    put:
      summary: "Update record"
      description: "Updates an existing record with the provided details."
      operationId: "updateResource"
      tags:
        - "Data"
      requestBody:
        description: "Updated record details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceUpdate"
      responses:
        '200':
          description: "Record updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Resource"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"
    delete:
      summary: "Delete record"
      description: "Deletes a record by ID from the specified resource."
      operationId: "deleteResource"
      tags:
        - "Data"
      responses:
        '204':
          description: "Record deleted successfully"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"
  
  /{tenantId}/search:
    parameters:
      - name: tenantId
        in: path
        description: "ID of the tenant"
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: "Semantic search across resources"
      description: "Performs a semantic search across one or multiple resources within the tenant's data."
      operationId: "semanticSearch"
      tags:
        - "Search"
      parameters:
        - name: query
          in: query
          description: "Semantic search query text"
          required: true
          schema:
            type: string
        - name: resources
          in: query
          description: "Resources to search (comma-separated list of table names)"
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResults"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '501':
          description: "Not implemented - semantic search is not enabled for the resources"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  
  /{tenantId}/export:
    parameters:
      - name: tenantId
        in: path
        description: "ID of the tenant"
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: "Export tenant data"
      description: "Exports all tenant data (all tables) as a JSON or SQL dump."
      operationId: "exportTenantData"
      tags:
        - "Integration"
      parameters:
        - name: format
          in: query
          description: "Export format (json or sql)"
          required: false
          schema:
            type: string
            enum: [json, sql]
            default: json
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResult"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '403':
          $ref: "#/components/responses/Forbidden"
  
  /health:
    get:
      summary: "Health check"
      description: "Check if the service is up and running."
      operationId: "healthCheck"
      tags:
        - "Health"
      responses:
        '200':
          description: "Service is healthy"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok]
                  version:
                    type: string
        '503':
          description: "Service is unhealthy"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [error]
                  message:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from the authentication service, must contain tenant context"
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: "API key for direct access"
  
  schemas:
    SchemaDefinition:
      type: object
      properties:
        schemaVersion:
          type: string
          description: "Semantic version of the schema definition itself (e.g., '1.0.0')"
        version:
          type: integer
          description: "Tenant schema version (for updates)"
        extensions:
          type: array
          items:
            type: string
          description: "List of required PostgreSQL extensions (e.g., 'uuid-ossp', 'postgis')"
        schemas:
          type: array
          description: "Array of schema definitions (namespaces)"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Name of the schema (e.g., 'public', 'sales')"
              tables:
                type: array
                description: "Array of table definitions within this schema"
                items:
                  $ref: "#/components/schemas/TableDefinition"
              enums:
                type: array
                description: "Enums specific to this schema"
                items:
                  $ref: "#/components/schemas/EnumDefinition"
              compositeTypes:
                type: array
                description: "Composite types specific to this schema"
                items:
                  $ref: "#/components/schemas/CompositeTypeDefinition"
              functions:
                type: array
                description: "Functions specific to this schema"
                items:
                  $ref: "#/components/schemas/FunctionDefinition"
              views:
                type: array
                description: "Views specific to this schema"
                items:
                  $ref: "#/components/schemas/ViewDefinition"
              triggers:
                type: array
                description: "Triggers specific to this schema"
                items:
                  $ref: "#/components/schemas/TriggerDefinition"
              indexes:
                type: array
                description: "Indexes specific to this schema"
                items:
                  $ref: "#/components/schemas/IndexDefinition"
              comment:
                type: string
                description: "Optional description of the schema"
        enums:
          type: array
          description: "Global enum definitions"
          items:
            $ref: "#/components/schemas/EnumDefinition"
        compositeTypes:
          type: array
          description: "Global composite type definitions"
          items:
            $ref: "#/components/schemas/CompositeTypeDefinition"
        functions:
          type: array
          description: "Global function definitions"
          items:
            $ref: "#/components/schemas/FunctionDefinition"
        views:
          type: array
          description: "Global view definitions"
          items:
            $ref: "#/components/schemas/ViewDefinition"
        triggers:
          type: array
          description: "Global trigger definitions"
          items:
            $ref: "#/components/schemas/TriggerDefinition"
        indexes:
          type: array
          description: "Global index definitions"
          items:
            $ref: "#/components/schemas/IndexDefinition"
      required:
        - schemas
    
    SchemaUpdateResponse:
      type: object
      properties:
        message:
          type: string
          description: "Status message"
        version:
          type: integer
          description: "New schema version"
    
    Resource:
      type: object
      description: "Generic resource record (fields depend on tenant schema)"
      additionalProperties: true
    
    ResourceCreate:
      type: object
      description: "Generic resource creation request (fields depend on tenant schema)"
      additionalProperties: true
    
    ResourceUpdate:
      type: object
      description: "Generic resource update request (fields depend on tenant schema)"
      additionalProperties: true
    
    ResourceList:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        pagination:
          type: object
          properties:
            limit:
              type: integer
              description: "Items per page"
            offset:
              type: integer
              description: "Current offset"
            total:
              type: integer
              description: "Total number of items"
            nextOffset:
              type: integer
              description: "Next offset value (if available)"
    
    SearchResults:
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            properties:
              resource:
                type: string
                description: "Resource type of the record"
              recordId:
                type: string
                description: "ID of the record"
              score:
                type: number
                description: "Similarity score (higher is more relevant)"
              data:
                $ref: "#/components/schemas/Resource"
            required:
              - resource
              - recordId
              - score
              - data
        pagination:
          type: object
          properties:
            limit:
              type: integer
              description: "Items per page"
            offset:
              type: integer
              description: "Current offset"
            total:
              type: integer
              description: "Total number of items (if available)"
    
    ExportResult:
      type: object
      properties:
        format:
          type: string
          enum: [json, sql]
          description: "Format of the exported data"
        data:
          type: object
          description: "Exported data as a JSON object (for json format)"
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/Resource"
        downloadUrl:
          type: string
          description: "URL to download the export file (for large exports)"
    
    Error:
      type: object
      properties:
        error:
          type: string
          description: "Error message"
        code:
          type: string
          description: "Error code"
        details:
          type: object
          additionalProperties: true
          description: "Additional error details"
        incident:
          type: string
          description: "Incident ID for tracking"
    
    TableDefinition:
      type: object
      properties:
        name:
          type: string
          description: "Name of the table"
        columns:
          type: object
          description: "Map of column definitions"
          additionalProperties:
            $ref: "#/components/schemas/ColumnDefinition"
        primaryKey:
          oneOf:
            - type: array
              items:
                type: string
              description: "Simple primary key as array of column names"
            - type: object
              properties:
                name:
                  type: string
                  description: "Name of the primary key constraint"
                columns:
                  type: array
                  items:
                    type: string
                  description: "Columns in the primary key"
              required:
                - columns
        unique:
          type: array
          description: "Array of unique constraint definitions"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Name of the unique constraint"
              columns:
                type: array
                items:
                  type: string
                description: "Columns in the unique constraint"
            required:
              - columns
        checks:
          type: array
          description: "Array of check constraint definitions"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Name of the check constraint"
              expression:
                type: string
                description: "SQL expression for the check"
            required:
              - expression
        foreignKeys:
          type: array
          description: "Array of foreign key definitions"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Name of the foreign key constraint"
              columns:
                type: array
                items:
                  type: string
                description: "Local column(s)"
              references:
                type: object
                properties:
                  schema:
                    type: string
                    description: "Optional schema name, defaults to same schema"
                  table:
                    type: string
                    description: "Referenced table"
                  columns:
                    type: array
                    items:
                      type: string
                    description: "Referenced column(s)"
                required:
                  - table
                  - columns
              onDelete:
                type: string
                enum: [CASCADE, RESTRICT, NO ACTION, SET NULL, SET DEFAULT]
                description: "Action on delete"
              onUpdate:
                type: string
                enum: [CASCADE, RESTRICT, NO ACTION, SET NULL, SET DEFAULT]
                description: "Action on update"
              deferrable:
                type: boolean
                description: "Whether the constraint is deferrable"
              initiallyDeferred:
                type: boolean
                description: "Whether the constraint is initially deferred"
            required:
              - columns
              - references
        indexes:
          type: array
          description: "Array of index definitions"
          items:
            $ref: "#/components/schemas/IndexDefinition"
        partitionBy:
          type: object
          description: "Defines partitioning for the table"
          properties:
            type:
              type: string
              enum: [RANGE, LIST, HASH]
              description: "Partition type"
            columns:
              type: array
              items:
                type: string
              description: "Columns or expressions to partition by"
          required:
            - type
            - columns
        partitions:
          type: array
          description: "List of child partitions"
          items:
            type: object
            properties:
              name:
                type: string
                description: "Name of the partition"
              values:
                type: string
                description: "SQL clause defining partition bounds/values"
            required:
              - name
              - values
        comment:
          type: string
          description: "Optional description of the table"
      required:
        - name
        - columns
    
    ColumnDefinition:
      type: object
      properties:
        type:
          type: string
          description: "Column data type or reference to user-defined type"
        nullable:
          type: boolean
          description: "Whether the column can be NULL, defaults to true"
        default:
          type: string
          description: "SQL expression or literal for the default value"
        generated:
          type: string
          description: "SQL expression for a generated column value"
        stored:
          type: boolean
          description: "For generated columns - whether to store the value"
        comment:
          type: string
          description: "Description for the column"
        array:
          type: boolean
          description: "Set to true if this is an array of the base type"
        dimensions:
          type: integer
          description: "For multi-dimensional arrays"
        length:
          type: integer
          description: "For varchar, char types"
        precision:
          type: integer
          description: "For numeric, timestamp, time, interval types"
        scale:
          type: integer
          description: "For numeric type"
        withTimeZone:
          type: boolean
          description: "For timestamp, time types"
        identity:
          oneOf:
            - type: boolean
            - type: object
          description: "For auto-incrementing integers"
        srid:
          type: integer
          description: "For geometry, geography types"
        geometryType:
          type: string
          description: "For geometry, geography types (e.g., 'Point', 'Polygon')"
      required:
        - type
    
    EnumDefinition:
      type: object
      properties:
        name:
          type: string
          description: "Name of the enum type"
        values:
          type: array
          items:
            type: string
          description: "Enum values"
      required:
        - name
        - values
    
    CompositeTypeDefinition:
      type: object
      properties:
        name:
          type: string
          description: "Name of the composite type"
        attributes:
          type: object
          additionalProperties:
            type: string
          description: "Attributes and their types"
      required:
        - name
        - attributes
    
    IndexDefinition:
      type: object
      properties:
        name:
          type: string
          description: "Index name (unique per schema)"
        table:
          type: string
          description: "Table name (required if index is defined globally)"
        columns:
          type: array
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  name:
                    type: string
                    description: "Column name"
                  opclass:
                    type: string
                    description: "Operator class"
                  collation:
                    type: string
                    description: "Collation"
                required:
                  - name
          description: "Array of column names or objects for opclass/collation"
        expression:
          type: string
          description: "For functional indexes"
        method:
          type: string
          enum: [BTREE, HASH, GIN, GIST, SPGIST, BRIN]
          description: "Index method"
        unique:
          type: boolean
          description: "Whether the index enforces uniqueness"
        concurrent:
          type: boolean
          description: "Whether to create the index concurrently"
        where:
          type: string
          description: "SQL predicate for partial indexes"
        include:
          type: array
          items:
            type: string
          description: "Array of column names for covering indexes"
        comment:
          type: string
          description: "Optional index description"
      required:
        - name
      anyOf:
        - required: ["columns"]
        - required: ["expression"]
    
    ViewDefinition:
      type: object
      properties:
        name:
          type: string
          description: "View name"
        definition:
          type: string
          description: "SQL SELECT query"
        materialized:
          type: boolean
          description: "Set to true for MATERIALIZED VIEW"
        checkOption:
          type: string
          enum: [LOCAL, CASCADED]
          description: "Option for WITH CHECK OPTION"
        comment:
          type: string
          description: "Optional view description"
      required:
        - name
        - definition
    
    FunctionDefinition:
      type: object
      properties:
        name:
          type: string
          description: "Function name"
        language:
          type: string
          description: "Language (e.g., plpgsql, sql, c)"
        args:
          type: array
          items:
            oneOf:
              - type: string
              - type: object
                properties:
                  name:
                    type: string
                  type:
                    type: string
          description: "Array of argument definitions"
        returns:
          type: string
          description: "Return type"
        body:
          type: string
          description: "Function body as a string"
        volatility:
          type: string
          enum: [VOLATILE, STABLE, IMMUTABLE]
          description: "Function volatility"
        security:
          type: string
          enum: [INVOKER, DEFINER]
          description: "Function security"
        comment:
          type: string
          description: "Optional function description"
      required:
        - name
        - language
        - returns
        - body
    
    TriggerDefinition:
      type: object
      properties:
        name:
          type: string
          description: "Trigger name"
        table:
          type: string
          description: "Target table name"
        timing:
          type: string
          enum: [BEFORE, AFTER, INSTEAD OF]
          description: "Trigger timing"
        events:
          type: array
          items:
            type: string
            enum: [INSERT, UPDATE, DELETE, TRUNCATE]
          description: "Array of events that activate the trigger"
        function:
          type: string
          description: "Name of the function to execute"
        forEach:
          type: string
          enum: [ROW, STATEMENT]
          description: "Row or statement level trigger"
        when:
          type: string
          description: "SQL condition for WHEN clause"
        comment:
          type: string
          description: "Optional trigger description"
      required:
        - name
        - table
        - timing
        - events
        - function
  
  responses:
    BadRequest:
      description: "Bad request - request validation failed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: "Unauthorized - missing or invalid authentication"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: "Forbidden - insufficient permissions"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: "Not found - resource does not exist"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: "Conflict - resource already exists or version conflict"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

security:
  - bearerAuth: []
  - apiKey: [] 