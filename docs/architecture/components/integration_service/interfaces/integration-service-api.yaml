openapi: 3.0.0
info:
  title: "Integration Service API"
  description: "API for the Integration Service, which provides a unified interface for connecting to external systems and services."
  version: "1.0.0"
  contact:
    name: "API Support"
    email: "api-support@example.com"
    url: "https://example.com/support"
  
servers:
  - url: "https://api.example.com/api/v1"
    description: "Production API Server"
  - url: "https://sandbox-api.example.com/api/v1"
    description: "Sandbox API Server for testing"

tags:
  - name: "Definitions"
    description: "Operations for managing integration definitions"
  - name: "Instances"
    description: "Operations for managing integration instances"
  - name: "Methods"
    description: "Operations for executing integration methods"
  - name: "Authentication"
    description: "Operations for handling integration authentication"

paths:
  /integrations/definitions:
    get:
      summary: "List integration definitions"
      description: "Returns a list of integration definitions based on the provided filters."
      operationId: "listIntegrationDefinitions"
      tags:
        - "Definitions"
      parameters:
        - name: page
          in: query
          description: "Page number for pagination"
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: "Search term to filter results"
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: "Filter by status"
          required: false
          schema:
            type: string
            enum: ["DRAFT", "PUBLISHED", "DEPRECATED", "ARCHIVED"]
        - name: type
          in: query
          description: "Filter by integration type"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationDefinitionList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create a new integration definition"
      description: "Creates a new integration definition with the provided details."
      operationId: "createIntegrationDefinition"
      tags:
        - "Definitions"
      requestBody:
        description: "Integration definition details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrationDefinitionCreate"
      responses:
        '201':
          description: "Integration definition created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationDefinition"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '409':
          $ref: "#/components/responses/Conflict"
  
  /integrations/definitions/{id}:
    parameters:
      - name: id
        in: path
        description: "ID of the integration definition"
        required: true
        schema:
          type: string
    get:
      summary: "Get integration definition by ID"
      description: "Returns details of a specific integration definition."
      operationId: "getIntegrationDefinition"
      tags:
        - "Definitions"
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationDefinition"
        '404':
          $ref: "#/components/responses/NotFound"
        '401':
          $ref: "#/components/responses/Unauthorized"
    patch:
      summary: "Update integration definition"
      description: "Updates an existing integration definition with the provided details."
      operationId: "updateIntegrationDefinition"
      tags:
        - "Definitions"
      requestBody:
        description: "Updated integration definition details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrationDefinitionUpdate"
      responses:
        '200':
          description: "Integration definition updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationDefinition"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '409':
          $ref: "#/components/responses/Conflict"

  /integrations/instances:
    get:
      summary: "List integration instances"
      description: "Returns a list of integration instances based on the provided filters."
      operationId: "listIntegrationInstances"
      tags:
        - "Instances"
      parameters:
        - name: page
          in: query
          description: "Page number for pagination"
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          description: "Search term to filter results"
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: "Filter by status"
          required: false
          schema:
            type: string
            enum: ["PENDING_CONFIGURATION", "PENDING_AUTHENTICATION", "CONNECTED", "DISCONNECTED", "AUTH_ERROR", "CONFIG_ERROR"]
        - name: definitionId
          in: query
          description: "Filter by integration definition ID"
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationInstanceList"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: "Create a new integration instance"
      description: "Creates a new integration instance with the provided details."
      operationId: "createIntegrationInstance"
      tags:
        - "Instances"
      requestBody:
        description: "Integration instance details"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IntegrationInstanceCreate"
      responses:
        '201':
          description: "Integration instance created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IntegrationInstance"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          description: "Integration definition not found"
        '409':
          $ref: "#/components/responses/Conflict"

  /integrations/instances/{instanceId}/methods/{methodName}/execute:
    parameters:
      - name: instanceId
        in: path
        description: "ID of the integration instance"
        required: true
        schema:
          type: string
      - name: methodName
        in: path
        description: "Name of the method to execute"
        required: true
        schema:
          type: string
    post:
      summary: "Execute integration method"
      description: "Executes a method on an integration instance."
      operationId: "executeIntegrationMethod"
      tags:
        - "Methods"
      requestBody:
        description: "Method parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MethodExecuteRequest"
      responses:
        '200':
          description: "Method executed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodExecuteResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"
        '429':
          $ref: "#/components/responses/TooManyRequests"

  /integrations/instances/{instanceId}/auth/oauth2/start:
    parameters:
      - name: instanceId
        in: path
        description: "ID of the integration instance"
        required: true
        schema:
          type: string
    post:
      summary: "Start OAuth authentication flow"
      description: "Initiates the OAuth2 authentication flow for an integration instance."
      operationId: "startOAuthFlow"
      tags:
        - "Authentication"
      requestBody:
        description: "OAuth flow parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthStartRequest"
      responses:
        '200':
          description: "OAuth flow initiated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthStartResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"

  /integrations/instances/{instanceId}/auth/oauth2/callback:
    parameters:
      - name: instanceId
        in: path
        description: "ID of the integration instance"
        required: true
        schema:
          type: string
    post:
      summary: "Complete OAuth authentication flow"
      description: "Completes the OAuth2 authentication flow after user authorization."
      operationId: "completeOAuthFlow"
      tags:
        - "Authentication"
      requestBody:
        description: "OAuth callback parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OAuthCallbackRequest"
      responses:
        '200':
          description: "OAuth flow completed successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OAuthCallbackResponse"
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '404':
          $ref: "#/components/responses/NotFound"

components:
  schemas:
    IntegrationDefinition:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the integration definition"
        name:
          type: string
          description: "Human-readable name for the integration"
        description:
          type: string
          description: "Detailed description of the integration"
        version:
          type: string
          description: "Semantic version of the integration definition"
        type:
          type: string
          description: "Integration type (e.g., http, graphql, soap)"
        authType:
          type: string
          enum: ["none", "basic", "api_key", "oauth2", "jwt", "custom"]
          description: "Authentication type required by the integration"
        methods:
          type: array
          description: "Available methods for this integration"
          items:
            $ref: "#/components/schemas/IntegrationMethod"
        configSchema:
          type: object
          description: "JSON Schema for configuration"
        oauth2Config:
          type: object
          description: "OAuth2 configuration (if applicable)"
        defaultConfig:
          type: object
          description: "Default configuration values"
        createdAt:
          type: string
          format: date-time
          description: "Creation timestamp"
        updatedAt:
          type: string
          format: date-time
          description: "Last update timestamp"
        publishedAt:
          type: string
          format: date-time
          description: "Publication timestamp (if published)"
        status:
          type: string
          enum: ["DRAFT", "PUBLISHED", "DEPRECATED", "ARCHIVED"]
          description: "Current status of the integration definition"

    IntegrationMethod:
      type: object
      properties:
        name:
          type: string
          description: "Method name"
        description:
          type: string
          description: "Method description"
        paramSchema:
          type: object
          description: "JSON Schema for method parameters"
        resultSchema:
          type: object
          description: "JSON Schema for method results"
        requestTransform:
          type: string
          description: "Optional transformation for request data"
        responseTransform:
          type: string
          description: "Optional transformation for response data"
        rateLimits:
          type: object
          properties:
            requestsPerMinute:
              type: integer
              description: "Maximum requests per minute"
            burstLimit:
              type: integer
              description: "Maximum burst limit"
        timeoutMs:
          type: integer
          description: "Timeout in milliseconds"

    IntegrationDefinitionList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationDefinitionSummary"
        pagination:
          $ref: "#/components/schemas/Pagination"

    IntegrationDefinitionSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        version:
          type: string
        type:
          type: string
        authType:
          type: string
        status:
          type: string
        updatedAt:
          type: string
          format: date-time

    IntegrationDefinitionCreate:
      type: object
      required:
        - name
        - type
        - authType
        - version
      properties:
        name:
          type: string
        description:
          type: string
        version:
          type: string
        type:
          type: string
        authType:
          type: string
        methods:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationMethod"
        configSchema:
          type: object
        oauth2Config:
          type: object
        defaultConfig:
          type: object

    IntegrationDefinitionUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        methods:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationMethod"
        defaultConfig:
          type: object
        status:
          type: string
          enum: ["DRAFT", "PUBLISHED", "DEPRECATED", "ARCHIVED"]

    IntegrationInstance:
      type: object
      properties:
        id:
          type: string
        integrationDefinitionId:
          type: string
        name:
          type: string
        config:
          type: object
        status:
          type: string
          enum: ["PENDING_CONFIGURATION", "PENDING_AUTHENTICATION", "CONNECTED", "DISCONNECTED", "AUTH_ERROR", "CONFIG_ERROR"]
        error:
          type: object
          properties:
            message:
              type: string
            code:
              type: string
            details:
              type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastUsedAt:
          type: string
          format: date-time
        lastConnectedAt:
          type: string
          format: date-time

    IntegrationInstanceList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/IntegrationInstanceSummary"
        pagination:
          $ref: "#/components/schemas/Pagination"

    IntegrationInstanceSummary:
      type: object
      properties:
        id:
          type: string
        integrationDefinitionId:
          type: string
        name:
          type: string
        status:
          type: string
        lastUsedAt:
          type: string
          format: date-time
        lastConnectedAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    IntegrationInstanceCreate:
      type: object
      required:
        - integrationDefinitionId
        - name
      properties:
        integrationDefinitionId:
          type: string
        name:
          type: string
        config:
          type: object

    MethodExecuteRequest:
      type: object
      properties:
        parameters:
          type: object
          description: "Method parameters (schema depends on the method)"

    MethodExecuteResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["SUCCESS", "ERROR"]
        data:
          type: object
          description: "Result data (schema depends on the method)"
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
            retryAfter:
              type: integer

    OAuthStartRequest:
      type: object
      required:
        - redirectUri
      properties:
        redirectUri:
          type: string
          format: uri

    OAuthStartResponse:
      type: object
      properties:
        authorizationUrl:
          type: string
          format: uri
        state:
          type: string

    OAuthCallbackRequest:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
        state:
          type: string

    OAuthCallbackResponse:
      type: object
      properties:
        status:
          type: string
          enum: ["SUCCESS", "ERROR"]
        integrationInstanceId:
          type: string
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        pages:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
            requestId:
              type: string

  responses:
    BadRequest:
      description: "Bad Request - The request was malformed or contains invalid parameters"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    Unauthorized:
      description: "Unauthorized - Authentication is required or failed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    NotFound:
      description: "Not Found - The requested resource does not exist"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    Conflict:
      description: "Conflict - The request conflicts with the current state"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    
    TooManyRequests:
      description: "Too Many Requests - Rate limit exceeded"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: "Rate limit ceiling for the given endpoint"
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: "Number of requests left for the time window"
        X-RateLimit-Reset:
          schema:
            type: integer
          description: "The time at which the rate limit resets, in Unix timestamp format"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
    mTLS:
      type: apiKey
      name: client-cert
      in: header
      description: "Mutual TLS authentication for service-to-service communication"

security:
  - bearerAuth: []
  - mTLS: [] 